filter(str_detect(col_name,
"optimized")) %>%
mutate(col_names = str_remove(col_name,
"optimized_params_"),
col_names = str_replace_all(col_names,
"_",
",")) %>%
pull(col_names) %>%
str_split(pattern = ",") %>%
as_vector()
}
get_model_results <- function(inFILE){
# data_summaries <-
param_names <-
get_param_names(inFILE)
read_tsv(inFILE,
na = c("",
"NA",
"nan",
"--")) %>%
clean_names() %>%
#if there are multiple headers, remove additional
filter(model != "Model") %>%
#if there are identical rows, remove them, this is from multiple runs in same dir without deleting
distinct() %>%
mutate(summary_file_name = inFILE) %>%
separate(7,
into = param_names,
sep = ",",
remove = FALSE) %>%
separate(replicate,
into = c("round",
"replicate"),
sep = "_Replicate_") %>%
mutate(round = as_factor(str_remove(round,
"Round_")),
replicate = as_factor(replicate)) %>%
arrange(model,
desc(log_likelihood))
}
get_all_model_results <- function(inFILES){
inFILES %>%
purrr::map(get_model_results) %>%
bind_rows() %>%
select(model:theta,
starts_with("nu"),
starts_with("m"),
starts_with("t"),
contains("optimized_params"))
}
#### WRANGLE DATA OUTPUT ####
data <-
get_all_model_results(file_names_optimized) %>%
mutate(across(nu1:t3,
~ as.numeric(.)))
data %>%
filter(! is.na(chi_squared) & chi_squared >= 0,
round == "4") %>%
group_by(model) %>%
summarize(max_log_likelihood = max(log_likelihood,
na.rm=TRUE)) %>%
ggplot(aes(x = model,
y = max_log_likelihood,
fill = max_log_likelihood)) +
geom_col() +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
data %>%
filter(! is.na(chi_squared) & chi_squared >= 0) %>%
ggplot(aes(x = model,
y = log_likelihood)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
facet_grid(round ~ .,
scales ="free_y")
ll_cutoff <-
data %>%
filter(! is.na(chi_squared) & chi_squared >= 0) %>%
mutate(model = factor(model)) %>%
filter(round == 4) %>%
group_by(model) %>%
mutate(median_ll = median(log_likelihood,
na.rm=TRUE)) %>%
pull(median_ll) %>%
unique() %>%
median()
data %>%
filter(! is.na(chi_squared) & chi_squared >= 0) %>%
mutate(model = factor(model)) %>%
filter(round == 4) %>%
group_by(model) %>%
mutate(median_ll = median(log_likelihood,
na.rm=TRUE)) %>%
filter(median_ll > ll_cutoff) %>%
ggplot(aes(x = model,
y = log_likelihood)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
facet_grid(round ~ .,
scales ="free_y")
#### ####
best_model = "sec_contact_asym_mig"
all_na <- function(x) any(!is.na(x))
data_best_model <-
data %>%
filter(round == 4,
model == best_model) %>%
select_if(all_na)
data_best_model %>%
pivot_longer(cols = theta:t2,
names_to = "parameter") %>%
group_by(parameter) %>%
mutate(median = median(value,
na.rm=TRUE),
min = min(value,
na.rm=TRUE),
max = max(value,
na.rm=TRUE)) %>%
select(model, parameter, median, max, min) %>%
distinct()
data_best_model
11.4*3.11
11.4*.65
.687*3.11
.56/4.06
6.89*.137931
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("plot_R.r")
#### USER DEFINED VARIABLES ####
fdrCUTOFF <- 0.01
50*50*40
32*39*40
#### INITIALIZE ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(janitor)
library(readr)
library(purrr)
indir <- "output_28_80"
#### LOAD VARIABLES ####
file_names_optimized <- list.files(indir,
full.names=TRUE) %>%
tibble() %>%
rename(file_name = 1) %>%
filter(str_detect(file_name,
"optimized")) %>%
pull()
#### FUNCTIONS ####
get_param_names <- function(inFILE){
# param_names <-
read_tsv(inFILE) %>%
clean_names() %>%
colnames() %>%
tibble() %>%
rename(col_name = 1) %>%
filter(str_detect(col_name,
"optimized")) %>%
mutate(col_names = str_remove(col_name,
"optimized_params_"),
col_names = str_replace_all(col_names,
"_",
",")) %>%
pull(col_names) %>%
str_split(pattern = ",") %>%
as_vector()
}
get_model_results <- function(inFILE){
# data_summaries <-
param_names <-
get_param_names(inFILE)
read_tsv(inFILE,
na = c("",
"NA",
"nan",
"--")) %>%
clean_names() %>%
#if there are multiple headers, remove additional
filter(model != "Model") %>%
#if there are identical rows, remove them, this is from multiple runs in same dir without deleting
distinct() %>%
mutate(summary_file_name = inFILE) %>%
separate(7,
into = param_names,
sep = ",",
remove = FALSE) %>%
separate(replicate,
into = c("round",
"replicate"),
sep = "_Replicate_") %>%
mutate(round = as_factor(str_remove(round,
"Round_")),
replicate = as_factor(replicate)) %>%
arrange(model,
desc(log_likelihood))
}
get_all_model_results <- function(inFILES){
inFILES %>%
purrr::map(get_model_results) %>%
bind_rows() %>%
select(model:theta,
starts_with("nu"),
starts_with("m"),
starts_with("t"),
contains("optimized_params"))
}
#### WRANGLE DATA OUTPUT ####
data <-
get_all_model_results(file_names_optimized) %>%
mutate(across(nu1:t3,
~ as.numeric(.)))
indir <- "../output_28_80"
#### LOAD VARIABLES ####
file_names_optimized <- list.files(indir,
full.names=TRUE) %>%
tibble() %>%
rename(file_name = 1) %>%
filter(str_detect(file_name,
"optimized")) %>%
pull()
#### FUNCTIONS ####
get_param_names <- function(inFILE){
# param_names <-
read_tsv(inFILE) %>%
clean_names() %>%
colnames() %>%
tibble() %>%
rename(col_name = 1) %>%
filter(str_detect(col_name,
"optimized")) %>%
mutate(col_names = str_remove(col_name,
"optimized_params_"),
col_names = str_replace_all(col_names,
"_",
",")) %>%
pull(col_names) %>%
str_split(pattern = ",") %>%
as_vector()
}
get_model_results <- function(inFILE){
# data_summaries <-
param_names <-
get_param_names(inFILE)
read_tsv(inFILE,
na = c("",
"NA",
"nan",
"--")) %>%
clean_names() %>%
#if there are multiple headers, remove additional
filter(model != "Model") %>%
#if there are identical rows, remove them, this is from multiple runs in same dir without deleting
distinct() %>%
mutate(summary_file_name = inFILE) %>%
separate(7,
into = param_names,
sep = ",",
remove = FALSE) %>%
separate(replicate,
into = c("round",
"replicate"),
sep = "_Replicate_") %>%
mutate(round = as_factor(str_remove(round,
"Round_")),
replicate = as_factor(replicate)) %>%
arrange(model,
desc(log_likelihood))
}
get_all_model_results <- function(inFILES){
inFILES %>%
purrr::map(get_model_results) %>%
bind_rows() %>%
select(model:theta,
starts_with("nu"),
starts_with("m"),
starts_with("t"),
contains("optimized_params"))
}
#### WRANGLE DATA OUTPUT ####
data <-
get_all_model_results(file_names_optimized) %>%
mutate(across(nu1:t3,
~ as.numeric(.)))
indir <- "output_28_80"
#### LOAD VARIABLES ####
file_names_optimized <- list.files(indir,
full.names=TRUE) %>%
tibble() %>%
rename(file_name = 1) %>%
filter(str_detect(file_name,
"optimized")) %>%
pull()
#### FUNCTIONS ####
get_param_names <- function(inFILE){
# param_names <-
read_tsv(inFILE) %>%
clean_names() %>%
colnames() %>%
tibble() %>%
rename(col_name = 1) %>%
filter(str_detect(col_name,
"optimized")) %>%
mutate(col_names = str_remove(col_name,
"optimized_params_"),
col_names = str_replace_all(col_names,
"_",
",")) %>%
pull(col_names) %>%
str_split(pattern = ",") %>%
as_vector()
}
get_model_results <- function(inFILE){
# data_summaries <-
param_names <-
get_param_names(inFILE)
read_tsv(inFILE,
na = c("",
"NA",
"nan",
"--")) %>%
clean_names() %>%
#if there are multiple headers, remove additional
filter(model != "Model") %>%
#if there are identical rows, remove them, this is from multiple runs in same dir without deleting
distinct() %>%
mutate(summary_file_name = inFILE) %>%
separate(7,
into = param_names,
sep = ",",
remove = FALSE) %>%
separate(replicate,
into = c("round",
"replicate"),
sep = "_Replicate_") %>%
mutate(round = as_factor(str_remove(round,
"Round_")),
replicate = as_factor(replicate)) %>%
arrange(model,
desc(log_likelihood))
}
get_all_model_results <- function(inFILES){
inFILES %>%
purrr::map(get_model_results) %>%
bind_rows() %>%
select(model:theta,
starts_with("nu"),
starts_with("m"),
starts_with("t"),
contains("optimized_params"))
}
#### WRANGLE DATA OUTPUT ####
data <-
get_all_model_results(file_names_optimized) %>%
mutate(across(nu1:t3,
~ as.numeric(.)))
#### INITIALIZE ####
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(janitor)
library(readr)
library(purrr)
#### USER DEFINED VARIABLES ####
indir <- "output_286_396"
indir <- "output_88_88"
indir <- "output_28_80"
indir <- "output_54_158"
#### LOAD VARIABLES ####
file_names_optimized <- list.files(indir,
full.names=TRUE) %>%
tibble() %>%
rename(file_name = 1) %>%
filter(str_detect(file_name,
"optimized")) %>%
pull()
#### FUNCTIONS ####
get_param_names <- function(inFILE){
# param_names <-
read_tsv(inFILE) %>%
clean_names() %>%
colnames() %>%
tibble() %>%
rename(col_name = 1) %>%
filter(str_detect(col_name,
"optimized")) %>%
mutate(col_names = str_remove(col_name,
"optimized_params_"),
col_names = str_replace_all(col_names,
"_",
",")) %>%
pull(col_names) %>%
str_split(pattern = ",") %>%
as_vector()
}
get_model_results <- function(inFILE){
# data_summaries <-
param_names <-
get_param_names(inFILE)
read_tsv(inFILE,
na = c("",
"NA",
"nan",
"--")) %>%
clean_names() %>%
#if there are multiple headers, remove additional
filter(model != "Model") %>%
#if there are identical rows, remove them, this is from multiple runs in same dir without deleting
distinct() %>%
mutate(summary_file_name = inFILE) %>%
separate(7,
into = param_names,
sep = ",",
remove = FALSE) %>%
separate(replicate,
into = c("round",
"replicate"),
sep = "_Replicate_") %>%
mutate(round = as_factor(str_remove(round,
"Round_")),
replicate = as_factor(replicate)) %>%
arrange(model,
desc(log_likelihood))
}
get_all_model_results <- function(inFILES){
inFILES %>%
purrr::map(get_model_results) %>%
bind_rows() %>%
select(model:theta,
starts_with("nu"),
starts_with("m"),
starts_with("t"),
contains("optimized_params"))
}
get_model_results <- function(inFILE){
# data_summaries <-
param_names <-
get_param_names(inFILE)
read_tsv(inFILE,
na = c("",
"NA",
"nan",
"--")) %>%
clean_names() %>%
#if there are multiple headers, remove additional
filter(model != "Model") %>%
#if there are identical rows, remove them, this is from multiple runs in same dir without deleting
distinct() %>%
mutate(summary_file_name = inFILE) %>%
separate(7,
into = param_names,
sep = ",",
remove = FALSE) %>%
separate(replicate,
into = c("round",
"replicate"),
sep = "_Replicate_") %>%
mutate(round = as_factor(str_remove(round,
"Round_")),
replicate = as_factor(replicate)) %>%
arrange(model,
desc(log_likelihood))
}
data <-
get_all_model_results(file_names_optimized)
file_names_optimized
list.files("output_54_158/Sekong_Mekong.sec_contact_asym_mig_size_three_epoch.optimized.txt")
list.files("output_54_158/Sekong_Mekong.no_mig.optimized.txt"  )
list.files("output_54_158/")
#### WRANGLE DATA OUTPUT ####
data <-
get_all_model_results(file_names_optimized) %>%
mutate(across(nu1:t3,
~ as.numeric(.)))
check_path('output_54_158/Sekong_Mekong.sec_contact_asym_mig_size_three_epoch.optimized.txt')
check_path('output_54_158/Sekong_Mekong.sec_contact_asym_mig_size.optimized.txt')
check_path('./output_54_158/Sekong_Mekong.sec_contact_asym_mig_size_three_epoch.optimized.txt')
list.files(indir,
full.names=TRUE)
normalizePath("output_54_158/Sekong_Mekong.sym_mig.log.txt")
list.files(indir,
full.names=TRUE)
list.files(indir,
full.names=TRUE) %>%
normalizePath()
#### LOAD VARIABLES ####
file_names_optimized <-
list.files(indir,
full.names=TRUE) %>%
normalizePath() %>%
tibble() %>%
rename(file_name = 1) %>%
filter(str_detect(file_name,
"optimized")) %>%
pull()
#### WRANGLE DATA OUTPUT ####
data <-
get_all_model_results(file_names_optimized) %>%
mutate(across(nu1:t3,
~ as.numeric(.)))
#### LOAD VARIABLES ####
file_names_optimized <-
list.files(indir,
full.names=TRUE) %>%
normalizePath() %>%
tibble() %>%
rename(file_name = 1) %>%
filter(str_detect(file_name,
"optimized")) %>%
pull()
setwd(shorterExistingWorkDir)
getwd()
